{"version":3,"sources":["index.tsx"],"names":["React","View","Text","Dimensions","Dash","defaultHeight","get","height","max","VerticalLabel","data","constructor","Array","i","length","tmpMax","Math","label","computingVerticalLabels","reverse","push","round","HorizontalDots","labels","prefix","suffix","labelColor","width","paddingTop","paddingBottom","map","item","index","labelText","justifyContent","flexDirection","flex","color","marginTop","alignSelf","HorizontalLablesData","barColor","secondBarColor","barLabelColor","lenght","position","bottom","_","toString","alignItems","fontSize","marginBottom","borderTopLeftRadius","borderTopRightRadius","abs","backgroundColor","marginHorizontal","flexWrap","BarChart","props","verticalLabels","horizontalData"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { View, Text, Dimensions } from 'react-native';\nimport Dash from 'react-native-dash';\n\ntype DataSet = number[] | number[][];\n\ntype Props = {\n  data: DataSet;\n  horizontalData: string[];\n  backgroundColor?: string;\n  barColor?: string;\n  secondBarColor?: string;\n  height?: number;\n  prefix?: string;\n  suffix?: string;\n  barLabelColor?: string;\n  labelColor?: string;\n};\n\nconst defaultHeight = Dimensions.get('window').height / 2.2;\nlet max = 0;\n\nconst VerticalLabel = ({ data }: { data: DataSet }) => {\n  if (data[0].constructor === Array) {\n    for (let i = 0; i < data.length; i++) {\n      let tmpMax = Math.max(...(data[i] as []));\n      if (tmpMax > max) {\n        max = tmpMax;\n      }\n    }\n  } else {\n    max = Math.max(...(data as []));\n  }\n  let label: number[] = computingVerticalLabels(max);\n  return label.reverse();\n};\n\nconst computingVerticalLabels = (max: number) => {\n  let label = [];\n  label.push(0);\n  label.push(Math.round(max / 4));\n  label.push(Math.round(max / 2));\n  label.push(Math.round(max / 4 + max / 2));\n  label.push(max);\n  return label;\n};\n\nconst HorizontalDots = ({\n  labels,\n  prefix,\n  suffix,\n  labelColor,\n}: {\n  labels: number[];\n  prefix?: string;\n  suffix?: string;\n  labelColor?: string;\n}) => {\n  return (\n    <View\n      style={{\n        width: '100%',\n        height: '100%',\n        paddingTop: 50,\n        paddingBottom: 20,\n      }}\n    >\n      {/* <View> */}\n      {labels.map((item, index) => {\n        const labelText = `${prefix || ''}${item}${suffix || ''}`;\n        return (\n          <View\n            style={{\n              height: `${100 / (labels.length - 1)}%`,\n              justifyContent: 'center',\n              flexDirection: 'row',\n            }}\n          >\n            <View style={{ flex: 0.125 }}>\n              <Text\n                style={{\n                  color: labelColor || '#D8D8D8',\n                  marginTop: -10,\n                  alignSelf: 'center',\n                }}\n              >\n                {labelText}\n              </Text>\n            </View>\n            <View style={{ flex: 0.875 }}>\n              <Dash\n                style={{ width: '100%', height: 1 }}\n                dashGap={index === labels.length - 1 ? 0 : 2}\n                dashLength={4}\n                dashThickness={1}\n                dashColor={labelColor || '#D8D8D8'}\n              />\n            </View>\n          </View>\n        );\n      })}\n    </View>\n  );\n};\n\nconst HorizontalLablesData = ({\n  label,\n  data,\n  prefix,\n  suffix,\n  barColor,\n  secondBarColor,\n  barLabelColor,\n  labelColor,\n}: {\n  label: string[];\n  data: DataSet;\n  prefix?: string;\n  suffix?: string;\n  barColor?: string;\n  secondBarColor?: string;\n  barLabelColor?: string;\n  labelColor?: string;\n}) => {\n  const lenght = label.length;\n  const width = 100 / lenght;\n  return (\n    <View style={{ position: 'absolute', bottom: 0, flex: 1, width: '100%' }}>\n      <View style={{ width: '100%', flexDirection: 'row' }}>\n        <View style={{ flex: 0.125 }} />\n        <View\n          style={{\n            flex: 0.875,\n            height: defaultHeight - 70,\n            bottom: 1,\n            flexDirection: 'row',\n          }}\n        >\n          {label.map((_, index) => {\n            return (\n              <View\n                key={index.toString()}\n                style={{\n                  flexDirection: 'row',\n                  justifyContent: 'center',\n                  alignItems: 'flex-end',\n                  width: `${width}%`,\n                }}\n              >\n                {/* <Text>{item}</Text> */}\n                {data[index].constructor === Array ? (\n                  <>\n                    <View style={{ alignItems: 'center' }}>\n                      <Text\n                        style={{\n                          color: barLabelColor || '#383838',\n                          fontSize: 12,\n                          marginBottom: 5,\n                        }}\n                      >\n                        {`${prefix || ''}${(data as number[][])[\n                          index\n                        ][0].toString()}${suffix || ''}`}\n                      </Text>\n                      <View\n                        style={{\n                          width: 15,\n                          borderTopLeftRadius: 4,\n                          borderTopRightRadius: 4,\n                          height: `${Math.round(\n                            (Math.abs((data as number[][])[index][0]) / max) *\n                              100\n                          )}%`,\n                          backgroundColor: barColor || '#FFD33D',\n                        }}\n                      />\n                    </View>\n                    <View style={{ alignItems: 'center' }}>\n                      <Text\n                        style={{\n                          color: barLabelColor || '#383838',\n                          fontSize: 12,\n                          marginBottom: 5,\n                        }}\n                      >\n                        {`${prefix || ''}${(data as number[][])[\n                          index\n                        ][1].toString()}${suffix || ''}`}\n                      </Text>\n                      <View\n                        style={{\n                          width: 15,\n                          borderTopLeftRadius: 4,\n                          borderTopRightRadius: 4,\n                          height: `${Math.round(\n                            (Math.abs((data as number[][])[index][1]) / max) *\n                              100\n                          )}%`,\n                          marginHorizontal: 5,\n                          backgroundColor: secondBarColor || '#E64B38',\n                        }}\n                      />\n                    </View>\n                  </>\n                ) : (\n                  <View>\n                    <Text\n                      style={{\n                        color: barLabelColor || '#383838',\n                        fontSize: 11,\n                        marginBottom: 5,\n                      }}\n                    >\n                      {`${prefix || ''}${data[index].toString()}${\n                        suffix || ''\n                      }`}\n                    </Text>\n                    <View\n                      style={{\n                        width: 15,\n                        borderTopLeftRadius: 4,\n                        borderTopRightRadius: 4,\n                        height: `${\n                          (Math.abs(data[index] as number) / max) * 100\n                        }%`,\n                        backgroundColor:\n                          data[index] < 0\n                            ? secondBarColor || '#E64B38'\n                            : barColor || '#FFD33D',\n                      }}\n                      key={index.toString()}\n                    />\n                  </View>\n                )}\n              </View>\n            );\n          })}\n        </View>\n      </View>\n      <View\n        style={{\n          bottom: 0,\n          flexDirection: 'row',\n          flex: 1,\n          width: '100%',\n        }}\n      >\n        <View style={{ flex: 0.125 }} />\n        <View\n          style={{\n            flex: 0.875,\n            flexDirection: 'row',\n            backgroundColor: 'transparent',\n            bottom: 0,\n          }}\n        >\n          {label.map((item) => {\n            return (\n              <View\n                style={{\n                  flexDirection: 'row',\n                  flexWrap: 'wrap',\n                  justifyContent: 'center',\n                  width: `${width}%`,\n                }}\n              >\n                <Text\n                  style={{ color: labelColor || '#D8D8D8' }}\n                  numberOfLines={1}\n                >\n                  {item}\n                </Text>\n              </View>\n            );\n          })}\n        </View>\n      </View>\n    </View>\n  );\n};\n\nconst BarChart = (props: Props) => {\n  const verticalLabels = VerticalLabel({ data: props.data });\n  return (\n    <View\n      style={{\n        backgroundColor: props.backgroundColor || 'transparent',\n        width: '100%',\n        height: props.height || defaultHeight,\n      }}\n    >\n      <HorizontalDots\n        labels={verticalLabels}\n        prefix={props.prefix}\n        suffix={props.suffix}\n        labelColor={props.labelColor}\n      />\n      <HorizontalLablesData\n        label={props.horizontalData}\n        data={props.data}\n        prefix={props.prefix}\n        suffix={props.suffix}\n        barColor={props.barColor}\n        secondBarColor={props.secondBarColor}\n        barLabelColor={props.barLabelColor}\n        labelColor={props.labelColor}\n      />\n    </View>\n  );\n};\n\nexport default BarChart;\n"]}