import React from 'react';
import { View, Text, Dimensions } from 'react-native';
import Dash from 'react-native-dash';
const defaultHeight = Dimensions.get('window').height / 2.2;
let max = 0;

const VerticalLabel = ({
  data
}) => {
  if (data[0].constructor === Array) {
    for (let i = 0; i < data.length; i++) {
      let tmpMax = Math.max(...data[i]);

      if (tmpMax > max) {
        max = tmpMax;
      }
    }
  } else {
    max = Math.max(...data);
  }

  let label = computingVerticalLabels(max);
  return label.reverse();
};

const computingVerticalLabels = max => {
  let label = [];
  label.push(0);
  label.push(Math.round(max / 4));
  label.push(Math.round(max / 2));
  label.push(Math.round(max / 4 + max / 2));
  label.push(max);
  return label;
};

const HorizontalDots = ({
  labels,
  prefix,
  suffix,
  labelColor
}) => {
  return /*#__PURE__*/React.createElement(View, {
    style: {
      width: '100%',
      height: '100%',
      paddingTop: 50,
      paddingBottom: 20
    }
  }, labels.map((item, index) => {
    const labelText = `${prefix || ''}${item}${suffix || ''}`;
    return /*#__PURE__*/React.createElement(View, {
      style: {
        height: `${100 / (labels.length - 1)}%`,
        justifyContent: 'center',
        flexDirection: 'row'
      }
    }, /*#__PURE__*/React.createElement(View, {
      style: {
        flex: 0.125
      }
    }, /*#__PURE__*/React.createElement(Text, {
      style: {
        color: labelColor || '#D8D8D8',
        marginTop: -10,
        alignSelf: 'center'
      }
    }, labelText)), /*#__PURE__*/React.createElement(View, {
      style: {
        flex: 0.875
      }
    }, /*#__PURE__*/React.createElement(Dash, {
      style: {
        width: '100%',
        height: 1
      },
      dashGap: index === labels.length - 1 ? 0 : 2,
      dashLength: 4,
      dashThickness: 1,
      dashColor: labelColor || '#D8D8D8'
    })));
  }));
};

const HorizontalLablesData = ({
  label,
  data,
  prefix,
  suffix,
  barColor,
  secondBarColor,
  barLabelColor,
  labelColor
}) => {
  const lenght = label.length;
  const width = 100 / lenght;
  return /*#__PURE__*/React.createElement(View, {
    style: {
      position: 'absolute',
      bottom: 0,
      flex: 1,
      width: '100%'
    }
  }, /*#__PURE__*/React.createElement(View, {
    style: {
      width: '100%',
      flexDirection: 'row'
    }
  }, /*#__PURE__*/React.createElement(View, {
    style: {
      flex: 0.125
    }
  }), /*#__PURE__*/React.createElement(View, {
    style: {
      flex: 0.875,
      height: defaultHeight - 70,
      bottom: 1,
      flexDirection: 'row'
    }
  }, label.map((_, index) => {
    return /*#__PURE__*/React.createElement(View, {
      key: index.toString(),
      style: {
        flexDirection: 'row',
        justifyContent: 'center',
        alignItems: 'flex-end',
        width: `${width}%`
      }
    }, data[index].constructor === Array ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(View, {
      style: {
        alignItems: 'center'
      }
    }, /*#__PURE__*/React.createElement(Text, {
      style: {
        color: barLabelColor || '#383838',
        fontSize: 12,
        marginBottom: 5
      }
    }, `${prefix || ''}${data[index][0].toString()}${suffix || ''}`), /*#__PURE__*/React.createElement(View, {
      style: {
        width: 15,
        borderTopLeftRadius: 4,
        borderTopRightRadius: 4,
        height: `${Math.round(Math.abs(data[index][0]) / max * 100)}%`,
        backgroundColor: barColor || '#FFD33D'
      }
    })), /*#__PURE__*/React.createElement(View, {
      style: {
        alignItems: 'center'
      }
    }, /*#__PURE__*/React.createElement(Text, {
      style: {
        color: barLabelColor || '#383838',
        fontSize: 12,
        marginBottom: 5
      }
    }, `${prefix || ''}${data[index][1].toString()}${suffix || ''}`), /*#__PURE__*/React.createElement(View, {
      style: {
        width: 15,
        borderTopLeftRadius: 4,
        borderTopRightRadius: 4,
        height: `${Math.round(Math.abs(data[index][1]) / max * 100)}%`,
        marginHorizontal: 5,
        backgroundColor: secondBarColor || '#E64B38'
      }
    }))) : /*#__PURE__*/React.createElement(View, null, /*#__PURE__*/React.createElement(Text, {
      style: {
        color: barLabelColor || '#383838',
        fontSize: 11,
        marginBottom: 5
      }
    }, `${prefix || ''}${data[index].toString()}${suffix || ''}`), /*#__PURE__*/React.createElement(View, {
      style: {
        width: 15,
        borderTopLeftRadius: 4,
        borderTopRightRadius: 4,
        height: `${Math.abs(data[index]) / max * 100}%`,
        backgroundColor: data[index] < 0 ? secondBarColor || '#E64B38' : barColor || '#FFD33D'
      },
      key: index.toString()
    })));
  }))), /*#__PURE__*/React.createElement(View, {
    style: {
      bottom: 0,
      flexDirection: 'row',
      flex: 1,
      width: '100%'
    }
  }, /*#__PURE__*/React.createElement(View, {
    style: {
      flex: 0.125
    }
  }), /*#__PURE__*/React.createElement(View, {
    style: {
      flex: 0.875,
      flexDirection: 'row',
      backgroundColor: 'transparent',
      bottom: 0
    }
  }, label.map(item => {
    return /*#__PURE__*/React.createElement(View, {
      style: {
        flexDirection: 'row',
        flexWrap: 'wrap',
        justifyContent: 'center',
        width: `${width}%`
      }
    }, /*#__PURE__*/React.createElement(Text, {
      style: {
        color: labelColor || '#D8D8D8'
      },
      numberOfLines: 1
    }, item));
  }))));
};

const BarChart = props => {
  const verticalLabels = VerticalLabel({
    data: props.data
  });
  return /*#__PURE__*/React.createElement(View, {
    style: {
      backgroundColor: props.backgroundColor || 'transparent',
      width: '100%',
      height: props.height || defaultHeight
    }
  }, /*#__PURE__*/React.createElement(HorizontalDots, {
    labels: verticalLabels,
    prefix: props.prefix,
    suffix: props.suffix,
    labelColor: props.labelColor
  }), /*#__PURE__*/React.createElement(HorizontalLablesData, {
    label: props.horizontalData,
    data: props.data,
    prefix: props.prefix,
    suffix: props.suffix,
    barColor: props.barColor,
    secondBarColor: props.secondBarColor,
    barLabelColor: props.barLabelColor,
    labelColor: props.labelColor
  }));
};

export default BarChart;
//# sourceMappingURL=index.js.map